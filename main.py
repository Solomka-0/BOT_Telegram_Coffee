# -*- coding: utf-8 -*-
import telebot
from telebot import types
import random
import data
import ast
import math
import json
import time

import requests
from yandex import Translater
from bs4 import BeautifulSoup as BS
import speech_controller
import speech

''' ------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ------ '''
ANSWERS = {'start_msg':'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –Ø Coffee. –ï—Å–ª–∏ —Ç—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤, —Ç–æ —è –º–æ–≥—É –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞, –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—Å—è, –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∞, –∏–ª–∏, –Ω–∞–ø—Ä–æ—Ç–∏–≤, —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –Ω–æ, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —Ç–µ–±–µ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üòâ\n–°–Ω–∞—á–∞–ª–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Üì',
'subs_correctly':'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è: /find_couple',
'subs_wrong':'–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω!',
'unsubs_correctly':'–û—Ç–ø–∏—Å–∞–ª—Å—è? - –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è: /subscribe',
'unsubs_wrong':'–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω! –°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—à–∏—Å—å: /subscribe',
'no_username':'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å–≤–æ–π username –∏–Ω–∞—á–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ —Å–º–æ–∂–µ—Ç —Ç–µ–±—è –Ω–∞–π—Ç–∏. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:\n–ù–ê–°–¢–†–û–ô–ö–ò >> –ò–ó–ú–ï–ù–ò–¢–¨ –ü–†–û–§–ò–õ–¨ >> –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø',
'information_without_lastname':'–ü–æ–∑–Ω–∞–∫–æ–º—Å—è, —ç—Ç–æ %s. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É(–µ–π), –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: @%s',
'information_with_lastname':'%s - –æ—Ç–Ω—ã–Ω–µ —Ç–≤–æ–π —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–º: @%s',
'no_couple': '–î–ª—è –≤–∞—Å –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ: —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–∞–º –≤–∞—Å –Ω–∞–π–¥–µ—Ç',
'no_subscribe': '–¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω?!? - /subscribe'
}

BOT = telebot.TeleBot(data.token)

''' ------ –§—É–Ω–∫—Ü–∏–∏–∏ ------ '''
class Subs(object): # –ö–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ, –µ–≥–æ —á—Ç–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    def __init__(self, filename):
        self.filename = filename
        try:
            with open(self.filename + '.json') as file:
                self.list = json.load(file).copy()
                file.close()
        except:
            self.list = []
    def saving(self): # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç(—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç) –ª–∏—Å—Ç
        with open(self.filename + '.json', 'w') as file:
            json.dump(self.list, file)
            file.close()
    def find_value(self, key, value): # –ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è –≤ –ª–∏—Å—Ç–µ
        for element in self.list:
            if element[key] == value:
                return element
        return False
    def add(self, element): # –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –ª–∏—Å—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç(—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç) –µ–≥–æ
        self.list.append(element)
        self.saving()
    def withdraw(self, key, value): # –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ª–∏—Å—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç(—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç) –µ–≥–æ
        self.list.remove(self.find_value(key, value))
        self.saving()



def contact_details_output(element): # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    global ANSWERS
    if element['last_name'] == None:
        return ANSWERS['information_without_lastname'] % (element['first_name'], element['username'])
    else:
        return ANSWERS['information_with_lastname'] % (element['first_name'] + ' ' + element['last_name'], element['username'])

def subscribe_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_0 = types.InlineKeyboardButton(text='- –ù–∞–π—Ç–∏ –ø–∞—Ä—É -', callback_data = 'call_find_couple')
    button_1 = types.InlineKeyboardButton(text='- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö -', callback_data = 'call_info')
    button_2 = types.InlineKeyboardButton(text='- –û—Ç–ø–∏—Å–∞—Ç—å—Å—è -', callback_data = 'call_unsubscribe')
    markup.add(button_0, button_1, button_2)
    return markup

def selection(id, array, rank):
    global rating
    max_rank = 0
    difference = 100;
    for element in array.list[id:id + 3]:
        if difference > math.fabs(rank - (rating.find_value('chat_id', element['chat_id'])['rating'])):
            rating.find_value('chat_id', element['chat_id'])['rating']
    return array.list[0]

def est_markup(id):
    global rating
    markup = types.InlineKeyboardMarkup()
    like_button = types.InlineKeyboardButton(text='- –û–Ω(–æ–Ω–∞) –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üëç -', callback_data = 'like' + str(id) + '_' + str(rating.find_value('chat_id', id)['rating']+1))
    dislike_button = types.InlineKeyboardButton(text='- –ú–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è/–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ üëé-', callback_data = 'dislike' + str(id) + '_' + str(rating.find_value('chat_id', id)['rating']-1))
    markup.add(like_button, dislike_button)
    return markup

@BOT.message_handler(commands = ['find_couple']) # –ò—â–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
def find_couple(message):
    global subs, ANSWERS, rating
    persons = []
    if subs.find_value('chat_id', message.chat.id):
        pass
    else:
        BOT.send_message(message.chat.id, ANSWERS['no_subscribe'])
        return

    if len(subs.list) > 1:
        persons.append(subs.find_value('chat_id', message.chat.id))
        subs.withdraw('chat_id', message.chat.id)
        persons.append(selection(random.randint(0, len(subs.list)-1), subs, rating.find_value('chat_id', message.chat.id)['rating']))
        BOT.send_message(message.chat.id, contact_details_output(persons[1]), reply_markup = est_markup(persons[1]['chat_id']))
        BOT.send_message(persons[1]['chat_id'], contact_details_output(persons[0]), reply_markup = est_markup(message.chat.id))
        subs.withdraw('chat_id', persons[1]['chat_id'])
    else:
        BOT.send_message(message.chat.id, ANSWERS['no_couple'])
        return

@BOT.message_handler(commands = ['unsubscribe']) # –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
def unsubscribe(message):
    global subs, ANSWERS
    if subs.find_value('chat_id', message.chat.id):
        subs.withdraw('chat_id', message.chat.id)
        BOT.send_message(message.chat.id, ANSWERS['unsubs_correctly'])
    else:
        BOT.send_message(message.chat.id, ANSWERS['unsubs_wrong'])

@BOT.message_handler(commands = ['subscribe']) # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
def subscribe(message):
    global subs, ANSWERS,rating
    if rating.find_value('chat_id', message.chat.id) == False:
        rating.add({'chat_id':message.chat.id, 'rating':10})
    if message.chat.username == None:
        BOT.send_message(message.chat.id, ANSWERS['no_username'])
        return
    if subs.find_value('chat_id', message.chat.id):
        BOT.send_message(message.chat.id, ANSWERS['subs_wrong'], reply_markup = subscribe_markup())
    else:
        subs.add({'chat_id':message.chat.id, 'username':message.chat.username, 'first_name':message.chat.first_name, 'last_name':message.chat.last_name})
        BOT.send_message(message.chat.id, ANSWERS['subs_correctly'], reply_markup = subscribe_markup())

@BOT.message_handler(commands = ['info']) # –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö
def info(message):
    global subs
    BOT.send_message(message.chat.id, f'–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [{len(subs.list)}]:')
    for sub in subs.list:
        name = sub['first_name'] + ' ' + str(sub['last_name'])
        BOT.send_message(message.chat.id, f'- {name}')

@BOT.message_handler(commands = ['start', 'help'])
def start(message):
    global rating
    if rating.find_value('chat_id', message.chat.id) == False:
        rating.add({'chat_id':message.chat.id, 'rating':10})
    start_markup = types.InlineKeyboardMarkup()
    start_button = types.InlineKeyboardButton(text='- –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è -', callback_data = 'call_subscribe')
    start_markup.add(start_button)
    BOT.send_message(message.chat.id, ANSWERS['start_msg'], reply_markup = start_markup)


@BOT.message_handler(content_types = ['text']) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def repeat_all_messages(message):
    global user_variables
    BOT.send_chat_action(message.chat.id, "typing")

    print(user_variables.find_value('chat_id', message.chat.id))
    if not user_variables.find_value('chat_id', message.chat.id):
        user_variables.add({'chat_id':message.chat.id, 'typing':True})

    request = message.text #–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    request = request.lower()
    words = [] # –ú–∞—Å—Å–∏–≤ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    id_w_list = [] # –ú–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ ID –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    words = speech.text_in_words(speech.remove_characters(request)) # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–ª–æ–≤–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞–ø—è—Ç—ã—Ö
    words = speech.del_spaces(words) # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ
    id_w_list = speech.words_in_ids(words) # –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –º–∞—Å—Å–∏–≤–µ —Å–æ —Å–ª–æ–≤–∞–º–∏
    try:
        answer = speech_controller.answer(id_w_list, message.chat.first_name, message.chat.id, words, request)
        if user_variables.find_value('chat_id', message.chat.id)['typing'] == True:
            time.sleep(len(answer)/25)
        BOT.send_message(message.chat.id, answer)
    except:
        pass

def delete_markup(message):
    BOT.edit_message_text(chat_id = message.chat.id, message_id = message.message_id, text = message.text)

@BOT.callback_query_handler(lambda call: ("like" in call.data) or ("dislike" in call.data))
def call_est(call):
    global rating
    if 'dislike' in call.data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        call.data = call.data.replace('dislike','')
        id = int(call.data[0:call.data.find('_')])
        rank = int(call.data[call.data.find('_')+1:len(call.data)])
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        rating.withdraw('chat_id', id)
        rating.add({'chat_id':id, 'rating':rank})
        delete_markup(call.message)
    elif 'like' in call.data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        call.data = call.data.replace('like','')
        id = int(call.data[0:call.data.find('_')])
        rank = int(call.data[call.data.find('_')+1:len(call.data)])
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        rating.withdraw('chat_id', id)
        rating.add({'chat_id':id, 'rating':rank + 1})
        delete_markup(call.message)

@BOT.callback_query_handler(lambda call: call.data=="call_subscribe")
def call_subscribe(call):
    subscribe(call.message)
    delete_markup(call.message)

@BOT.callback_query_handler(lambda call: call.data=="call_unsubscribe")
def call_unsubscribe(call):
    unsubscribe(call.message)
    delete_markup(call.message)

@BOT.callback_query_handler(lambda call: call.data=="call_info")
def call_info(call):
    info(call.message)
    delete_markup(call.message)

@BOT.callback_query_handler(lambda call: call.data=="call_find_couple")
def call_find_couple(call):
    find_couple(call.message)
    delete_markup(call.message)

user_variables = Subs('user_variables') # –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subs = Subs('subscribers') # –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
rating = Subs('rating') # –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º

if __name__ == '__main__':
    BOT.polling(none_stop=True)
