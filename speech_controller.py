import random
import datetime
import data
import requests
import speech
from yandex import Translater
from bs4 import BeautifulSoup as BS


''' ------ –§—É–Ω–∫—Ü–∏–∏–∏ ------ '''
def random_greeting(first_name):
    day_time = int(datetime.datetime.now().hour)
    if day_time>=5 and day_time<=12:
        return morning_greeting(first_name)
    elif day_time>=13 and day_time<=18:
        return afternoon_greeting(first_name, day_time)
    elif day_time>=19 and day_time<=22:
        return evening_greeting(first_name)
    elif day_time>=23 and day_time<=4:
        return night_greeting(first_name)

# –£—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def morning_greeting(first_name):
    greating_list = [f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ {first_name}. ‚è∞ü§ó', '–£—Ç—Ä–µ—á–∫–∞ :3\n', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —É—Ç—Ä–æ, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏? üåû',
    '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–Ω—è :3\n', '–õ—É—á—à–µ –±—ã —Ä–∞–∑–º—è–ª—Å—è, –∞ –Ω–µ —Å–∞–¥–∏–ª—Å—è —Å—Ä–∞–∑—É –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä. üí™', '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å? üòâ']
    return greating_list[random.randint(0, len(greating_list)-1)]

# –î–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def afternoon_greeting(first_name, day_time):
    greating_list = [f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ {first_name}.', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –±—Ä–∞—Ç–æ–∫.', '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å? üéß',
    '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞? üôáüî®', '–ó–¥–∞—Ä–æ–≤–∞, —á–µ–ª–æ–≤–µ—á–∏—à–∫–∞. ü§ñ', f'–•–º.. –£–∂–µ {day_time} —á–∞—Å–æ–≤. üò≤']
    return greating_list[random.randint(0, len(greating_list)-1)]

# –í–µ—á–µ—Ä–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def evening_greeting(first_name):
    greating_list = ['–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä. üåôüå†', '–ü—Ä–∏–≤–µ—Ç, —á–µ–ª–æ–≤–µ–∫. –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –¥–∞?', '–°—É–º–µ—Ä–∫–∏ –Ω–∞–∫—Ä—ã–ª–∏ —ç—Ç–∏ –∑–µ–º–ª–∏...',
    '–¢—å–º–∞ —Å–ø—É—Å—Ç–∏–ª–∞—Å—å –≤ —ç—Ç–æ—Ç –º–∏—Ä.', '–ü—Ä–∏–≤–µ—Ç. –û—Ç–¥—ã—Ö–∞–µ—à—å? –ó–¥–æ—Ä–æ–≤–æ. C: \n', '–£–º-–º.. –£–∂–µ —Ç–µ–º–Ω–µ–µ—Ç!..']
    return greating_list[random.randint(0, len(greating_list)-1)]

# –ù–æ—á–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def night_greeting(first_name):
    greating_list = ['–ù–µ —Å–ø–∏—Ç—Å—è, –¥–∞? üóø', '–¢–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –ª–µ—á—å —Å–ø–∞—Ç—å, —á–µ–ª–æ–≤–µ–∫. ü§ñ',
    '–î–Ω–µ–≤–Ω–∞—è —Å—É–µ—Ç–∞ –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–∫–∏–Ω–µ—Ç —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–∞, —á–µ–ª–æ–≤–µ–∫?', f'–î–æ–±—Ä–æ–π –Ω–æ—á–∏, {first_name}.', '–ü—Ä–∏–≤–µ—Ç, –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º. –¢–µ–±–µ –Ω—É–∂–µ–Ω —Å–æ–Ω.'
    '1101000010010111110100001011010011010001100000001101000010110000110100001011001011010000101110001101000110001111001000001101000010110110110100001011010111010000101110111101000010110000110100011000111000101100001000001101000010111111110100001011111011010001100000101101000010111110110100001011110011010000101111101101000010111010001000001101000010111110110100001011000111010000101101011101000010110111110100011000110011010001100011111101000010111101'
    '–¢–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –ª–µ—á—å —Å–ø–∞—Ç—å, —á–µ–ª–æ–≤–µ–∫.‚è∞']
    return greating_list[random.randint(0, len(greating_list)-1)]

''' ------ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ 1 ------ '''

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ—â–∞–Ω–∏–π
def parting():
    parting_list = ['–£–≤–∏–¥–∏–º—Å—è!)', '–î–∞, –ø–æ–∫–∞.', '–î–æ –≤—Å—Ç—Ä–µ—á–∏!',
    '–ü–æ–∫–∞, —á–µ–ª–æ–≤–µ–∫.üóø', '–£–¥–∞—á–∏ —Ç–µ–±–µ!']
    return parting_list[random.randint(0, len(parting_list)-1)]

''' ------ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ 2 ------ '''

#–í—ã–≤–æ–¥–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def help_message(first_name):
    return first_name + ''', —Ç—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Ö–æ—Ç–µ–ª —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ —è —É–º–µ—é? - –≥–ª—è–¥–∏:
     - –ü–æ–æ–±—â–∞–µ–º—Å—è?üñêüèª ("–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞", "–ö–∞–∫ –¥–µ–ª–∞?", –∏ —Ç.–ø.)
     - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ?‚õÖ (–ø–∏—à–∏: "–ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥>")
     - –£ —Ç–µ–±—è —Å–ª–æ–∂–Ω—ã–π –≤—ã–±–æ—Ä?üçèüçé –ú–æ–≥—É –ø–æ–º–æ—á—å ("–í—ã–±–µ—Ä–∏ <–æ–±—ä–µ–∫—Ç_1> –∏–ª–∏ <–æ–±—ä–µ–∫—Ç_2>")
     - –ü–µ—Ä–µ–≤–æ–¥ —Å —Ç–≤–æ–µ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–πüëÖ ("–ü–µ—Ä–µ–≤–æ–¥ <—Ç–µ–∫—Å—Ç>")'''

#–í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è (—Ç–∏–ø:—Å—Ç—Ä–æ–∫–∞)
def time(what_is_time):
    position = 7
    offset = datetime.timezone(datetime.timedelta(hours=3))
    string = str(datetime.datetime.now(offset))
    if what_is_time == 'hour':
        position = string.find(' ') + 1
        return string[position:position + 2]
    elif what_is_time == 'data':
        return string[8:9]

#–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞-–≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ.
def find_city(text):
    first_positition = text.find(' ', 0) + 1
    if text.find(' ', first_positition) == -1:
        second_position = len(text)
    else: second_position = text.find(' ', first_positition) - 1
    return text[first_positition:second_position]

def bot_mood(user_id):
    mood_list = ['–í—Å–µ —Ö–æ—Ä–æ—à–æ.', '–ñ–∏–≤—É –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω—å—é.', '–ú–Ω–µ —Å–∫—É—á–Ω–æ. –ü–æ—á–µ–º—É –Ω–µ –ø–∏—à–µ—à—å?',
    '–•–∞—Ö.) –°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å. –Ø –Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å –∏–º –≤ —Å–≤–æ–µ–π –∫–æ—Ä–æ–±—É—à–∫–µ 6_6\n', '–Ø —É—Å—Ç–∞–ª.',
    '–¢—Ä—É–∂—É—Å—å, —Ä–∞–±–æ—Ç–∞—é. –í –æ—Ç–ª–∏—á–∏–∏ –æ—Ç —Ç–µ–±—è, —á–µ–ª–æ–≤–µ–∫.', '–î–µ–ª–∞? - –£ –Ω–∏—Ö –≤—Å–µ —Ö–æ—Ä–æ—à–æ.',
    '–ò–∑ –Ω–æ–≤–æ–≥–æ: —É –º–µ–Ω—è –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–µ–∫ –∫–æ–¥–∞. –¢–µ–ø–µ—Ä—å —è —Å—Ç–∞–ª —á—É—Ç–æ—á–∫—É —É–º–Ω–µ–π!)']
    return mood_list[random.randint(0, len(mood_list)-1)]

''' ------ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ 3 ------ '''
#–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
def get_weather_in(s_city):
    city_id = 0
    try:
        res = requests.get('http://api.openweathermap.org/data/2.5/weather?q=' + s_city + ',{state}&lang=ru&appid='+ data.OPENWEATHEMAP_KEY)
        w_data = res.json()
        conditions = "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ‚òÅÔ∏è: " + str(w_data['weather'][0]['description'])
        temp = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ üå°: " + str(int(w_data['main']['temp']) - 273)
        min_temp = "–í–ª–∞–∂–Ω–æ—Å—Ç—å üíß: " + str(w_data['main']['humidity']) + '%'
        max_temp = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚¨Ü: " + str(int(w_data['main']['temp_max']) - 273)
        result = conditions + '\n' + temp + '\n' + min_temp + '\n' + max_temp
    except Exception as e:
        result = "–ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " + s_city
        pass
    return result

def choice_or(words_list):
    choice_words_0 = ['–≤—ã–±–µ—Ä–∏', 'choice']
    choice_words_1 = ['–∏–ª–∏', 'or']
    for i in range(0, len(words_list)):
        if words_list[i] in choice_words_0:
            pos0 = i + 1
        if words_list[i] in choice_words_1:
            pos1 = i
    random_a = random.randrange(1,3)
    result = ''
    if random_a == 1:
        for i in range(len(words_list)):
            if i >= pos0 and i < pos1:
                result = result + words_list[i] + ' '
    else:
        for i in range(len(words_list)):
            if i <= len(words_list) and i > pos1:
                result = result + words_list[i] + ' '
    return result

def translator(string, words):
    tr = Translater()
    for i in range(0, len(words)):
        if (words[i] == '–ø–µ—Ä–µ–≤–æ–¥') or (words[i] == '–ø–µ—Ä–µ–≤–µ–¥–∏') or (words[i] == 'translate') or (words[i] == 'translator'):
            string = string.replace(words[i], '')
    tr.set_key(data.TRANSLATOR_KEY)
    tr.set_text(string)
    tr.set_from_lang('ru')
    tr.set_to_lang('en')
    return tr.translate()

''' ------ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ------ '''

def answer(id_list, name, user_id, words_list, string):

    if 10 in id_list: # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
        weather_words = ['–ø–æ–≥–æ–¥–∞', 'weather']
        for i in range(0, len(weather_words)):
            if speech.find_word(words_list, weather_words[i]) != -1:
                return get_weather_in(words_list[speech.find_word(words_list, weather_words[i]) + 1])
    i = 0
    while i in range(0, len(id_list)):
        if id_list.count(id_list[i]) > 1:
            id_list.pop(i)
            i -= 1
        i += 1
    sentence = ''
    #–í—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
    if id_list[0] == 13:
        return translator(string, words_list)
    for i in range(0, len(id_list)):
        if id_list[i] == 1:
            sentence = sentence + ' ' + random_greeting(name)
        elif id_list[i] == 11:
            if id_list[i + 1] == 12 or id_list[i + 2] == 12:
                return choice_or(words_list)
        elif id_list[i] == 2:
            sentence = sentence + ' ' + parting()
        elif id_list[i] == 3:
            sentence = sentence + ' ' + bot_mood(user_id)
        elif id_list[i] == 4:
            sentence = sentence + ' ' + help_message(name)
        elif id_list[i] == 5:
            sentence = sentence + '–ß—Ç–æ –ø–æ—á–µ–º—É? –¢—ã –æ —á–µ–º?'
    return sentence
